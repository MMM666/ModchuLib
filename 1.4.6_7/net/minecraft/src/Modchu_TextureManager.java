package net.minecraft.src;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileReader;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Modifier;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Random;import java.util.TreeMap;import java.util.regex.Matcher;import java.util.regex.Pattern;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import net.minecraft.server.MinecraftServer;public class Modchu_TextureManager {//	private static String defDirName = "/mob/littleMaid/";	/**	 * ‹Œƒ^ƒCƒv‚Ìƒtƒ@ƒCƒ‹–¼	 */	private static String defNames[] = {		"mob_littlemaid0.png", "mob_littlemaid1.png",		"mob_littlemaid2.png", "mob_littlemaid3.png",		"mob_littlemaid4.png", "mob_littlemaid5.png",		"mob_littlemaid6.png", "mob_littlemaid7.png",		"mob_littlemaid8.png", "mob_littlemaid9.png",		"mob_littlemaida.png", "mob_littlemaidb.png",		"mob_littlemaidc.png", "mob_littlemaidd.png",		"mob_littlemaide.png", "mob_littlemaidf.png",		"mob_littlemaidw.png",		"mob_littlemaid_a00.png", "mob_littlemaid_a01.png"	};	public static final int tx_oldwild		= 0x10; //16;	public static final int tx_oldarmor1	= 0x11; //17;	public static final int tx_oldarmor2	= 0x12; //18;	public static final int tx_gui			= 0x20; //32;	public static final int tx_wild			= 0x30; //48;	public static final int tx_armor1		= 0x40; //64;	public static final int tx_armor2		= 0x50; //80;	public static List<Modchu_TextureBox> textures = new ArrayList<Modchu_TextureBox>();	private static Map<String, MMM_ModelBiped[]> modelMap = new TreeMap<String, MMM_ModelBiped[]>();	public static String[] armorFilenamePrefix;	public static MMM_ModelBiped[] defaultModel;	/**	 * ƒT[ƒo[EƒNƒ‰ƒCƒAƒ“ƒgŠÔ‚ÅƒeƒNƒXƒ`ƒƒƒpƒbƒN‚Ì–¼ÌƒŠƒXƒg‚Ì“¯Šú‚ðŽæ‚é‚Ì‚ÉŽg‚¤B	 * ‚¤‚Ü‚¢‚±‚Æì‚ê‚ÎAƒNƒ‰ƒCƒAƒ“ƒg‘¤‚É‚¾‚¯ƒeƒNƒXƒ`ƒƒƒpƒbƒN‚ð“ü‚ê‚ê‚ÎAƒT[ƒo‚É‚Í•s—v‚É‚È‚é‚Í‚¸B	 * ƒNƒ‰ƒCƒAƒ“ƒg‚©‚çƒT[ƒo[‚ÉƒCƒ“ƒfƒbƒNƒXƒŠƒXƒg‚É–³‚¢–¼Ì‚ÌƒCƒ“ƒfƒbƒNƒX‚ðƒŠƒNƒGƒXƒgB	 * ƒT[ƒo[‚©‚çƒŠƒNƒGƒXƒg‚³‚ê‚½ƒCƒ“ƒfƒbƒNƒX‚ð•Ô‚·A–³‚¯‚ê‚ÎƒT[ƒo[‘¤‚ÌƒŠƒXƒg‚É’Ç‰Á‚µ‚Ä’l‚ð•Ô‚·B	 * ƒNƒ‰ƒCƒAƒ“ƒg‘¤‚ÌƒŠƒXƒg‚É’Ç‰ÁB	 */	public static Map<Integer, Modchu_TextureBoxServer> textureServer = new HashMap<Integer, Modchu_TextureBoxServer>();//	public static Map<Integer, String> textureIndex = new HashMap<Integer, String>();	/**	 * ƒNƒ‰ƒCƒAƒ“ƒg‘¤‚Í—v‚ç‚È‚¢	 *///	public static Map<Integer, Integer> textureColor	= new HashMap<Integer, Integer>();//	public static Map<Integer, Float> textureHeight		= new HashMap<Integer, Float>();//	public static Map<Integer, Float> textureWidth		= new HashMap<Integer, Float>();//	public static Map<Integer, Float> textureYOffset	= new HashMap<Integer, Float>();	/**	 * ƒNƒ‰ƒCƒAƒ“ƒg‘¤‚ÅŽg‚¤	 */	private static String[] requestString = new String[] {		null, null, null, null, null, null, null, null,		null, null, null, null, null, null, null, null	};	protected static List<String[]> searchPrefix = new ArrayList<String[]>();	public static void init() {		MMM_FileManager.getModFile("littleMaidMob", "littleMaidMob");		addSearch("littleMaidMob", "/mob/littleMaid/", "ModelLittleMaid_");	}	public static String[] getSearch(String pName) {		for (String[] lss : searchPrefix) {			if (lss[0].equals(pName)) {				return lss;			}		}		return null;	}	/**	 * ’Ç‰Á‘ÎÛ‚Æ‚È‚éŒŸõ‘ÎÛƒtƒ@ƒCƒ‹ŒQ‚Æ‚»‚ê‚¼‚ê‚ÌŒŸõ•¶Žš—ñ‚ðÝ’è‚·‚éB	 */	public static void addSearch(String pName, String pTextureDir, String pClassPrefix) {		searchPrefix.add(new String[] {pName, pTextureDir, pClassPrefix});	}	/**	 * ƒpƒbƒP[ƒW–¼Ì‚Ìˆê’v‚·‚é•¨‚ð•Ô‚·B	 */	public static Modchu_TextureBox getTextureBox(String pName) {		for (Modchu_TextureBox ltb : textures) {			if (ltb.packegeName.equals(pName)) {				return ltb;			}		}		return null;	}	private static void getArmorPrefix() {		// ƒA[ƒ}[ƒtƒ@ƒCƒ‹‚ÌƒvƒŠƒtƒBƒbƒNƒX‚ðŠl“¾		try {			Field f = RenderPlayer.class.getDeclaredFields()[3];			f.setAccessible(true);			String[] s = (String[])f.get(null);			List<String> list = Arrays.asList(s);			armorFilenamePrefix = list.toArray(new String[0]);//			for (String t : armorFilenamePrefix) {//				mod_littleMaidMob.Debug("armor:".concat(t));//			}		}		catch (Exception e) {		}	}	public static boolean loadTextures() {		// ƒA[ƒ}[‚Ìƒtƒ@ƒCƒ‹–¼‚ðŽ¯•Ê‚·‚é‚½‚ß‚Ì•¶Žš—ñ‚ðŠl“¾‚·‚é		getArmorPrefix();		// ƒfƒtƒHƒ‹ƒgƒeƒNƒXƒ`ƒƒ–¼‚Ìì¬		if (defaultModel != null) {			String[] lss = getSearch("littleMaidMob");			for (int i = 0; i < defNames.length; i++) {				addTextureName((new StringBuilder()).append(lss[1]).append("default/").append(defNames[i]).toString(), lss);			}			modelMap.put("default", defaultModel);//			getStringToIndex("default");			Modchu_Debug.tDebug("getTexture-append-default-done.");		}		for (String[] lss : searchPrefix) {			Modchu_Debug.tDebug(String.format("getTexture[%s].", lss[0]));			// jar“à‚ÌƒeƒNƒXƒ`ƒƒ‚ð’Ç‰Á			if (MMM_FileManager.minecraftJar == null) {				Modchu_Debug.tDebug("getTexture-append-jar-file not founded.");			} else {				addTexturesJar(MMM_FileManager.minecraftJar, lss);			}			// mods			for (File lf : MMM_FileManager.getFileList(lss[0])) {				boolean lflag;				if (lf.isDirectory()) {					// ƒfƒBƒŒƒNƒgƒŠ					lflag = addTexturesDir(lf, lss);				} else {					// zip					lflag = addTexturesZip(lf, lss);				}				Modchu_Debug.tDebug(String.format("getTexture-append-%s-%s.", lf.getName(), lflag ? "done" : "fail"));			}		}/*		// ƒ[ƒh‚µ‚½ƒeƒNƒXƒ`ƒƒƒpƒbƒN‚©‚çƒNƒ‰ƒX‚ð‹­§ƒ[ƒh		for (Entry<String, Map<Integer, String>> tt: textures.entrySet()) {			String st = tt.getKey();			int index = st.lastIndexOf("_");			if (index > -1) {				st = st.substring(index + 1);				if (!st.isEmpty()) {					addModelClass("ModelLittleMaid_".concat(st).concat(".class"));				}			}		}		Modchu_Debug.tDebug("getTexture-append-Models-append-done.");*/		// ƒeƒNƒXƒ`ƒƒƒpƒbƒP[ƒW‚Éƒ‚ƒfƒ‹ƒNƒ‰ƒX‚ð•R•t‚¯		for (Modchu_TextureBox ltb : textures) {			int li = ltb.packegeName.lastIndexOf("_");			if (li > -1) {				String ls = ltb.packegeName.substring(li + 1);				ltb.setModels(ls, modelMap.get(ls));				if (ltb.models == null) {					ltb.setModels("default", defaultModel);				}			} else {				ltb.setModels("default", defaultModel);			}		}		return false;	}	public static boolean loadTextureIndex() {		// ƒT[ƒo[—pƒeƒNƒXƒ`ƒƒ–¼Ì‚ÌƒCƒ“ƒfƒNƒbƒXƒ[ƒ_[		File lfile = MinecraftServer.getServer().getFile("config/textureList.cfg");		if (lfile.exists() && lfile.isFile()) {			try {				FileReader fr = new FileReader(lfile);				BufferedReader br = new BufferedReader(fr);				String ls;				int li = 0;				textureServer.clear();				while ((ls = br.readLine()) != null) {					String lt[] = ls.split(",");					if (lt.length > 1) {						Modchu_TextureBoxServer lbox = new Modchu_TextureBoxServer();						lbox.contractColor	= Integer.valueOf(lt[0], 16);						lbox.wildColor		= Integer.valueOf(lt[1], 16);						lbox.modelHeight	= Float.valueOf(lt[2]);						lbox.modelWidth		= Float.valueOf(lt[3]);						lbox.modelYOffset	= Float.valueOf(lt[4]);						lbox.textureName	= lt[5];						textureServer.put(li++, lbox);					}				}				br.close();				fr.close();			} catch (Exception e) {				e.printStackTrace();			}			return true;		} else {			Modchu_TextureBoxServer lbox = new Modchu_TextureBoxServer();			lbox.contractColor	= 0xffff;			lbox.wildColor		= 0x1000;			lbox.modelHeight	= 1.35F;			lbox.modelWidth		= 0.5F;			lbox.modelYOffset	= 1.35F;			lbox.textureName	= "default";			textureServer.put(0, lbox);		}		return false;	}	/**	 * ƒeƒNƒXƒ`ƒƒƒCƒ“ƒfƒbƒNƒX‚ð\’zB	 */	public static void initTextureList(boolean pFlag) {		textureServer.clear();		if (pFlag) {			// Internal			int li = 0;			for (Modchu_TextureBox lte : textures) {				Modchu_TextureBoxServer lbox = new Modchu_TextureBoxServer();				lbox.contractColor	= lte.getContractColorBits();				lbox.wildColor		= lte.getWildColorBits();				lbox.modelHeight	= lte.models[0].getHeight();				lbox.modelWidth		= lte.models[0].getWidth();				lbox.modelYOffset	= lte.models[0].getyOffset();				lbox.textureName	= lte.packegeName;				textureServer.put(li++, lbox);				li++;			}		}	}	/**	 * “n‚³‚ê‚½–¼Ì‚ð‰ðÍ‚µ‚ÄLMM—p‚Ìƒ‚ƒfƒ‹ƒNƒ‰ƒX‚©‚Ç‚¤‚©‚ð”»’è‚·‚éB	 * uModelLittleMaid_v‚Æ‚¢‚¤•¶Žš—ñ‚ªŠÜ‚Ü‚ê‚Ä‚¢‚ÄA	 * uMMM_ModelBipedv‚ðŒp³‚µ‚Ä‚¢‚ê‚Îƒ}ƒ‹ƒ`ƒ‚ƒfƒ‹‚Æ‚µ‚ÄƒNƒ‰ƒX‚ð“o˜^‚·‚éB	 * @param fname	 */	private static void addModelClass(String fname, String[] pSearch) {		// ƒ‚ƒfƒ‹‚ð’Ç‰Á		int lfindprefix = fname.indexOf(pSearch[2]);		if (lfindprefix > -1 && fname.endsWith(".class")) {			String cn = fname.replace(".class", "");			String pn = cn.substring(pSearch[2].length() + lfindprefix);			if (modelMap.containsKey(pn)) return;			ClassLoader lclassloader = Modchu_Debug.class.getClassLoader();			Package lpackage = Modchu_Debug.class.getPackage();			Class lclass;			try {				if (lpackage != null) {					cn = (new StringBuilder(String.valueOf(lpackage.getName()))).append(".").append(cn).toString();					lclass = lclassloader.loadClass(cn);				} else {					lclass = Class.forName(cn);				}				if (!(MMM_ModelBiped.class).isAssignableFrom(lclass) || Modifier.isAbstract(lclass.getModifiers())) {					Modchu_Debug.tDebug(String.format("getModelClass-fail."));					return;				}				MMM_ModelBiped mlm[] = new MMM_ModelBiped[3];				Constructor<MMM_ModelBiped> cm = lclass.getConstructor(float.class);				mlm[0] = cm.newInstance(0.0F);				float[] lsize = mlm[0].getArmorModelsSize();				mlm[1] = cm.newInstance(lsize[0]);				mlm[2] = cm.newInstance(lsize[1]);				modelMap.put(pn, mlm);//				mod_littleMaidMob.Debug(String.format("getModelClass-%s", mlm[0].getClass().getName()));				Modchu_Debug.tDebug(String.format("getModelClass-%s:%s", pn, cn));			}			catch (Exception exception) {				Modchu_Debug.tDebug(String.format("getModelClass-Exception: %s", fname));			}			catch (Error error) {				Modchu_Debug.tDebug(String.format("getModelClass-Error: ".concat(fname)));			}		}	}	private static void addTextureName(String fname, String[] pSearch) {		// ƒpƒbƒP[ƒW‚ÉƒeƒNƒXƒ`ƒƒ‚ð“o˜^		if (!fname.startsWith("/")) {			fname = (new StringBuilder()).append("/").append(fname).toString();		}		if (fname.startsWith(pSearch[1])) {			int i = fname.lastIndexOf("/");			if (pSearch[1].length() < i) {				String pn = fname.substring(pSearch[1].length(), i);				pn = pn.replace('/', '.');				String fn = fname.substring(i);				int j = getIndex(fn);				if (j > -1) {					String an = null;					if (j == tx_oldarmor1) {						j = tx_armor1;						an = "default";					}					if (j == tx_oldarmor2) {						j = tx_armor2;						an = "default";					}					if (j == tx_oldwild) {						j = tx_wild + 12;					}					Modchu_TextureBox lts = getTextureBox(pn);					if (lts == null) {						lts = new Modchu_TextureBox(pn, pSearch);						textures.add(lts);						Modchu_Debug.tDebug(String.format("getTextureName-append-texturePack-%s", pn));//						Modchu_Debug.tDebug(String.format("getTextureName-append-armorPack-%s", pn));					}					if (j >= 0x40 && j <= 0x5f) {						// ƒ_ƒ[ƒWƒhƒA[ƒ}[						Map<String, Map<Integer, String>> s = lts.armors;						if (an == null) an = fn.substring(1, fn.lastIndexOf('_'));						Map<Integer, String> ss = s.get(an);						if (ss == null) {							ss = new HashMap<Integer, String>();							s.put(an, ss);						}						ss.put(j, fn);//						mod_littleMaidMob.Debug(String.format("getTextureName-append-armor-%s:%d:%s", pn, j, fn));					} else {						// ’Êí‚ÌƒeƒNƒXƒ`ƒƒ						Map<Integer, String> s = lts.textures;						s.put(j, fn);//						mod_littleMaidMob.Debug(String.format("getTextureName-append-%s:%d:%s", pn, j, fn));					}				}			}		}	}	public static boolean addTexturesZip(File file, String[] pSearch) {		//		if (file == null || file.isDirectory()) {			return false;		}		try {			FileInputStream fileinputstream = new FileInputStream(file);			ZipInputStream zipinputstream = new ZipInputStream(fileinputstream);			ZipEntry zipentry;			do {				zipentry = zipinputstream.getNextEntry();				if(zipentry == null)				{					break;				}				if (!zipentry.isDirectory()) {					if (zipentry.getName().endsWith(".class")) {						addModelClass(zipentry.getName(), pSearch);					} else {						addTextureName(zipentry.getName(), pSearch);					}				}			} while(true);			zipinputstream.close();			fileinputstream.close();			return true;		} catch (Exception exception) {			Modchu_Debug.tDebug("addTextureZip-Exception.");			return false;		}	}	protected static void addTexturesJar(File file, String[] pSearch) {		//		if (file.isFile()) {			Modchu_Debug.tDebug("addTextureJar-zip.");			if (addTexturesZip(file, pSearch)) {				Modchu_Debug.tDebug("getTexture-append-jar-done.");			} else {				Modchu_Debug.tDebug("getTexture-append-jar-fail.");			}		}		// ˆÓ–¡‚È‚µH		if (file.isDirectory()) {			Modchu_Debug.tDebug("addTextureJar-file.");			for (File t : file.listFiles()) {				if (t.isDirectory() && t.getName().equalsIgnoreCase("mob")) {					if (addTexturesDir(file, pSearch)) {						Modchu_Debug.tDebug("getTexture-append-jar-done.");					} else {						Modchu_Debug.tDebug("getTexture-append-jar-fail.");					}				}			}			Package package1 = (net.minecraft.src.ModLoader.class).getPackage();			if(package1 != null)			{				String s = package1.getName().replace('.', File.separatorChar);				file = new File(file, s);				Modchu_Debug.tDebug(String.format("addTextureJar-file-Packege:%s", s));			} else {				Modchu_Debug.tDebug("addTextureJar-file-null.");			}			if (addTexturesDir(file, pSearch)) {				Modchu_Debug.tDebug("getTexture-append-jar-done.");			} else {				Modchu_Debug.tDebug("getTexture-append-jar-fail.");			}		}	}	public static boolean addTexturesDir(File file, String[] pSearch) {		// modsƒtƒHƒ‹ƒ_‚É“Ë‚Áž‚ñ‚Å‚ ‚é‚à‚Ì‚àŒŸõAÄ‹A‚ÅB		if (file == null) {			return false;		}		try {			for (File t : file.listFiles()) {				if(t.isDirectory()) {					addTexturesDir(t, pSearch);				} else {					if (t.getName().endsWith(".class")) {						addModelClass(t.getName(), pSearch);					} else {						String s = t.getPath().replace('\\', '/');						int i = s.indexOf(pSearch[1]);						if (i > -1) {							// ‘ÎÛ‚ÍƒeƒNƒXƒ`ƒƒƒfƒBƒŒƒNƒgƒŠ							addTextureName(s.substring(i), pSearch);//							addTextureName(s.substring(i).replace('\\', '/'));						}					}				}			}			return true;		} catch (Exception e) {			Modchu_Debug.tDebug("addTextureDebug-Exception.");			return false;		}	}	private static int getIndex(String name) {		// –¼‘O‚©‚çƒCƒ“ƒfƒbƒNƒX‚ðŽæ‚èo‚·		for (int i = 0; i < defNames.length; i++) {			if (name.endsWith(defNames[i])) {				return i;			}		}		Pattern p = Pattern.compile("_([0-9a-f]+).png");		Matcher m = p.matcher(name);		if (m.find()) {			return Integer.decode("0x" + m.group(1));		}		return -1;	}	public static String getNextPackege(String nowname, int index) {		// ŽŸ‚ÌƒeƒNƒXƒ`ƒƒƒpƒbƒP[ƒW‚Ì–¼‘O‚ð•Ô‚·		boolean f = false;		Modchu_TextureBox lreturn = null;		for (Modchu_TextureBox ltb : textures) {			if (ltb.hasColor(index)) {				if (f) {					return ltb.packegeName;				}				if (lreturn == null) {					lreturn = ltb;				}			}			if (ltb.packegeName.equalsIgnoreCase(nowname)) {				f = true;			}		}		return lreturn == null ? null : lreturn.packegeName;	}	public static String getPrevPackege(String nowname, int index) {		// ‘O‚ÌƒeƒNƒXƒ`ƒƒƒpƒbƒP[ƒW‚Ì–¼‘O‚ð•Ô‚·		Modchu_TextureBox lreturn = null;		for (Modchu_TextureBox ltb : textures) {			if (ltb.packegeName.equalsIgnoreCase(nowname)) {				if (lreturn != null) {					break;				}			}			if (ltb.hasColor(index)) {				lreturn = ltb;			}		}		return lreturn == null ? null  :lreturn.packegeName;	}	public static String getTextureName(String name, int index) {		Modchu_TextureBox ltb = getTextureBox(name);		if (ltb == null) {			Modchu_Debug.tDebug("getTextureName ltb == null");			return null;		} else if (!ltb.hasColor(index)) {			// “ÁŽêƒpƒ^[ƒ“			if (index >= 0x60 && index <= 0x6f) {				// –Ú‚ÌƒeƒNƒXƒ`ƒƒ				return getTextureName(name, 0x13);			}			return null;		} else {			return ltb.getTextureName(index);		}	}	public static int getTextureCount() {		return textures.size();	}	public static String getNextArmorPackege(String nowname) {		// ŽŸ‚ÌƒeƒNƒXƒ`ƒƒƒpƒbƒP[ƒW‚Ì–¼‘O‚ð•Ô‚·		boolean f = false;		Modchu_TextureBox lreturn = null;		for (Modchu_TextureBox ltb : textures) {			if (ltb.hasArmor()) {				if (f) {					return ltb.packegeName;				}				if (lreturn == null) {					lreturn = ltb;				}			}			if (ltb.packegeName.equalsIgnoreCase(nowname)) {				f = true;			}		}		return lreturn.packegeName;	}	public static String getPrevArmorPackege(String nowname) {		// ‘O‚ÌƒeƒNƒXƒ`ƒƒƒpƒbƒP[ƒW‚Ì–¼‘O‚ð•Ô‚·		Modchu_TextureBox lreturn = null;		for (Modchu_TextureBox ltb : textures) {			if (ltb.packegeName.equalsIgnoreCase(nowname)) {				if (lreturn != null) {					break;				}			}			if (ltb.hasArmor()) {				lreturn = ltb;			}		}		return lreturn.packegeName;	}	/**	 * ƒA[ƒ}[‚ÌƒeƒNƒXƒ`ƒƒƒtƒ@ƒCƒ‹–¼‚ð•Ô‚·	 */	public static String getArmorTextureName(String name, int index, ItemStack itemstack) {		// index‚Í0x40,0x50”Ô‘ä		Modchu_TextureBox ltb = getTextureBox(name);		if (ltb == null) {			return null;		}		return ltb.getArmorTextureName(index, itemstack);	}	public static String getRandomTexture(Random pRand) {		if (textureServer.isEmpty()) {			return "default";		} else {			return ((Modchu_TextureBoxServer)textureServer.values().toArray()[pRand.nextInt(textureServer.size())]).textureName;		}	}	/**	 * –ì¶‚ÌƒƒCƒh‚ÌF‚ðƒ‰ƒ“ƒ_ƒ€‚Å•Ô‚·	 */	public static int getRandomWildColor(int pIndex, Random rand) {		if (textureServer.isEmpty() || pIndex < 0) return -1;		List<Integer> llist = new ArrayList<Integer>();		int lcolor = textureServer.get(pIndex).wildColor;		for (int li = 0; li < 16; li++) {			if ((lcolor & 0x01) > 0) {				llist.add(li);				lcolor = lcolor >>> 1;			}		}		if (llist.size() > 0) {			return llist.get(rand.nextInt(llist.size()));		} else {			return -1;		}	}	/**	 * Œ_–ñ‚ÌƒƒCƒh‚ÌF‚ðƒ‰ƒ“ƒ_ƒ€‚Å•Ô‚·	 */	public static int getRandomContractColor(int pIndex, Random rand) {		Modchu_TextureBox ltb = getTextureBox(getIndexToString(pIndex).textureName);		if (ltb == null) return -1;		List<Integer> llist = new ArrayList<Integer>();		for (int li = 0; li < 16; li++) {			if (ltb.hasColor(li)) {				llist.add(li);			}		}		if (llist.size() > 0) {			return llist.get(rand.nextInt(llist.size()));		} else {			return -1;		}	}	/*	 * ƒT[ƒo[ƒNƒ‰ƒCƒAƒ“ƒgŠÔ‚Å‚ÌƒeƒNƒXƒ`ƒƒŠÇ—ŠÖ”ŒQ	 */	/**	 * “n‚³‚ê‚½ƒeƒNƒXƒ`ƒƒƒpƒbƒN‚Ì–¼Ì‚ÉŠÖ˜A•t‚¯‚³‚ê‚½ƒCƒ“ƒfƒbƒNƒX‚ð•Ô‚·B	 */	public static int getStringToIndex(String pname) {		for (Entry<Integer, Modchu_TextureBoxServer> le : textureServer.entrySet()) {			// TODO:—]Œv‚Èˆ—ž‚Ý			if (le.getValue().textureName != null && le.getValue().textureName.equals(pname)) {				return le.getKey();			}		}		if (MMM_Helper.isClient) {			// ƒNƒ‰ƒCƒAƒ“ƒg‚Å–¢Šm”F–¼Ì‚ª‚ ‚Á‚½ê‡‚ÍƒT[ƒo[‚Ö–â‚¢‡‚í‚¹‚ðs‚¤B			int li = getRequestIndex(pname);			if (li < 0) {				// ƒŠƒNƒGƒXƒg’†A‚à‚µ‚­‚Í‹ó‚«‚ª‚È‚¢B				return li;			}			if (li > -1) {				Modchu_TextureBox lbox = Modchu_TextureManager.getTextureBox(pname);				byte ldata[] = new byte[18 + pname.getBytes().length];				ldata[0] = mod_MMM_MMMLib.MMM_Server_GetTextureIndex;				ldata[1] = (byte)li;				MMM_Helper.setInt(ldata, 2, lbox.getWildColorBits());				MMM_Helper.setInt(ldata, 6, Float.floatToIntBits(lbox.models[0].getHeight()));				MMM_Helper.setInt(ldata, 10, Float.floatToIntBits(lbox.models[0].getWidth()));				MMM_Helper.setInt(ldata, 14, Float.floatToIntBits(lbox.models[0].getyOffset()));				MMM_Helper.setStr(ldata, 18, pname);				mod_MMM_MMMLib.sendToServer(ldata);				Modchu_Debug.tDebug("GetTextureIndex");			}			return li;		} else {			// ƒT[ƒo[‘¤‚Å–¢Šm”F–¼Ì‚ª‚ ‚Á‚½ê‡‚ÍƒfƒtƒHƒ‹ƒg‚ð•Ô‚·B			return 0;		}	}	public static int setStringToIndex(int pIndex, String pname) {		// ƒNƒ‰ƒCƒAƒ“ƒg‚Ì“®ì		Modchu_TextureBox lbox = getTextureBox(pname);		if (lbox == null) {			// Ž©•ª‚Ì‚Æ‚±‚ë‚É‚Í‚È‚¢ƒeƒNƒXƒ`ƒƒƒpƒbƒN‚ÍƒfƒtƒHƒ‹ƒg‚Å•\Ž¦			lbox = getTextureBox("default");		}		textureServer.put(pIndex, new Modchu_TextureBoxServer(lbox));		return getStringToIndex(pname);	}	public static int setTextureBoxToIndex(Modchu_TextureBoxServer pBox) {		// ƒT[ƒo[‘¤‚Ì“®ì		for (Entry<Integer, Modchu_TextureBoxServer> le : textureServer.entrySet()) {			if (le.getValue().textureName.equals(pBox.textureName)) {				// Šù‚É‚ ‚é•ª‚Í“o˜^‚µ‚È‚¢				return le.getKey();			}		}		int li = textureServer.size();		textureServer.put(li, pBox);		return li;	}	public static Modchu_TextureBoxServer getIndexToString(int pIndex) {		if (!textureServer.containsKey(pIndex)) {			if (MMM_Helper.isClient) {				// ƒT[ƒo[‘¤‚Ö”Ô†‚É‘Î‰ž‚·‚éƒeƒNƒXƒ`ƒƒƒpƒbƒN‚Ì–¼Ì‚ð–â‚¢‡‚í‚¹				// ƒT[ƒ`‚©‚¯‚éŽž—p‚Ìƒuƒ‰ƒ“ƒN‚ðÝ’u				// TODO:‚±‚Ì‚Ö‚ñ‚¨‚©‚µ‚¢				textureServer.put(pIndex, new Modchu_TextureBoxServer());				byte[] ldata = new byte[3];				ldata[0] = mod_MMM_MMMLib.MMM_Server_GetTextureStr;				MMM_Helper.setShort(ldata, 1, pIndex);				mod_MMM_MMMLib.sendToServer(ldata);			} else {				// ƒT[ƒo[‘¤‚ÉƒCƒ“ƒfƒbƒNƒX‚ª–³‚¢‚Æ‚¢‚¤‚±‚Æ‚Í—L‚è“¾‚È‚¢‚Í‚¸B			}		}		return textureServer.get(pIndex);	}	// ƒlƒbƒgƒ[ƒN‰z‚µ‚ÉƒeƒNƒXƒ`ƒƒƒCƒ“ƒfƒNƒX‚ð“¾‚éÛ‚ÉŽg‚¤	public static int getRequestIndex(String pVal) {		int lblank = -1;		for (int li = 0; li < requestString.length; li++) {			if (requestString[li] == null) {				lblank = li;			} else if (requestString[li].equals(pVal)) {				// Šù‚É—v‹’†				return -2;			}		}		if (lblank >= 0) {			requestString[lblank] = pVal;		}		return lblank;	}	public static String getRequestString(int pIndex) {		String ls = requestString[pIndex];		requestString[pIndex] = null;		return ls;	}}